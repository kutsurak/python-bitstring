#!/usr/bin/env python# BitString class for bit-wise data manipulation.license = """The MIT LicenseCopyright (c) 2006-2009 Scott Griffiths (scott@griffiths.name)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE."""import unittestimport bitstringfrom bitstring import BitString, BitStringErrorclass BitStringTest(unittest.TestCase):        def testCreationFromFile(self):        s = BitString(filename = 'test.m1v')        self.assertEqual(s[0:32].hex, '0x000001b3')        self.assertEqual(s.readbytes(4).hex, '0x000001b3')        width = s.readbits(12).uint        height = s.readbits(12).uint        self.assertEqual((width, height), (352, 288))            def testCreataionFromFileErrors(self):        self.assertRaises(OSError, BitString, filename='Idonotexist')            def testFindInFile(self):        s = BitString(filename = 'test.m1v')        self.assertTrue(s.findbytealigned('\x16\x01\x20'))        self.assertEqual(s.bytepos, 4)        s3 = s.readbytes(3)        self.assertEqual(s3.hex, '0x160120')        s.bytepos = 0        self.assertTrue(s._pos == 0)        self.assertTrue(s.findbytealigned('\x00\x01\xb2'))        self.assertEqual(s.bytepos, 13)            def testHexFromFile(self):        s = BitString(filename='test.m1v')        self.assertEqual(s.hex[0:10], '0x000001b3')        self.assertEqual(s.hex[-8:], '000001b7')        s.hex = '0x11'        self.assertEqual(s.hex, '0x11')            def testFileOperations(self):        s1 = BitString(filename='test.m1v')        s2 = BitString(filename='test.m1v')        self.assertEqual(s1.readbytes(4).hex, '0x000001b3')        self.assertEqual(s2.readbytes(4).hex, '0x000001b3')        s1.advancebytes(4)        self.assertEqual(s1.readbyte().hex, '0x02')        self.assertEqual(s2.readbytes(5).hex, '0x1601208302')        s1.bitpos = s1.length - 1        self.assertRaises(BitStringError, s1.advancebits, 1)            def testFind(self):        s = BitString(bin='0000110110000')        self.assertTrue(s.find(BitString(bin='11011')))        self.assertEqual(s.bitpos, 4)        self.assertEqual(s.readbits(5).bin, '11011')        s.bitpos = 0        self.assertFalse(s.find(BitString(bin='11001')))        def testFindCornerCases(self):        s = BitString(bin='000111000111')        self.assertTrue(s.find(BitString(bin='000')))        self.assertEqual(s.bitpos, 0)        self.assertTrue(s.find(BitString(bin='000')))        self.assertEqual(s.bitpos, 0)        t = BitString(bin='0111000111')        s.find(t)        self.assertTrue(s.find(BitString(bin='0111000111')))        self.assertTrue(s.find(BitString(bin='000')))        self.assertEqual(self.bitpos, 6)        self.assertTrue(self.find(BitString(bin='111')))        self.assertEqual(self.bitpos, 9)        s.advancebits(2)        self.assertTrue(self.find(BitString(bin='1')))        s.advancebits(1)                            def testCreationFromData(self):        s = BitString(data='\xa0\xff')        self.assertEqual((s.length, s.offset, s.hex), (16, 0, '0xa0ff'))            def testCreationFromDataWithOffset(self):        s = BitString(data='\xa0\xb1\xC2', offset=4)        self.assertEqual((s.length, s.offset, s.hex), (20, 4, '0x0b1c2'))    def testCreationFromHex(self):        s = BitString(hex='0xA0ff')        self.assertEqual((s.length, s.offset, s.hex), (16, 0, '0xa0ff'))            def testCreationFromHexWithOffset(self):        s = BitString(hex='0xa0b1c2', offset = 4)        self.assertEqual((s.length, s.offset, s.hex), (20, 4, '0x0b1c2'))        def testCreationFromHexWithWhitespace(self):        s = BitString(hex='  \n0 X a  4e       \r3  \n')        self.assertEqual(s.hex, '0xa4e3')            def testCreationFromBin(self):        s = BitString(bin='1010000011111111')        self.assertEqual((s.length, s.offset, s.hex), (16, 0, '0xa0ff'))        self.assertEqual(s.bitpos, 0)        s = BitString(bin='00', length = 1)        self.assertEqual(s.bin, '0')        s = BitString(bin='00', length = 0)        self.assertEqual(s.bin, '')        s = BitString(bin=' 0000 \n 0001\r ')        self.assertEqual(s.bin, '00000001')            def testCreationFromUint(self):        s = BitString(uint = 15, length = 6)        self.assertEqual(s.bin, '001111')        s = BitString(uint = 0, length = 1)        self.assertEqual(s.bin, '0')        s.uint = 1        self.assertEqual(s.uint, 1)        s = BitString(length = 8)        s.uint = 0        self.assertEqual(s.uint, 0)        s.uint = 255        self.assertEqual(s.uint, 255)        self.assertRaises(BitStringError, s._setuint, 256)    def testCreationFromUintErrors(self):        self.assertRaises(BitStringError, BitString, uint = -1, length = 10)        self.assertRaises(BitStringError, BitString, uint = 12)        self.assertRaises(BitStringError, BitString, uint = 4, length = 2)        self.assertRaises(BitStringError, BitString, uint = 0, length = 0)        self.assertRaises(BitStringError, BitString, uint = 12, length = -12)            def testCreationFromInt(self):        s = BitString(int = 0, length = 4)        self.assertEqual(s.bin, '0000')        s = BitString(int = 1, length = 2)        self.assertEqual(s.bin, '01')        s = BitString(int = -1, length = 11)        self.assertEqual(s.bin, '11111111111')        s = BitString(int = 12, length = 7)        self.assertEqual(s.int, 12)        s = BitString(int = -243, length = 108)        self.assertEqual((s.int, s.length), (-243, 108))        for length in range(6, 10):            for value in range(-17, 17):                s = BitString(int = value, length = length)                self.assertEqual((s.int, s.length), (value, length))        def testCreationFromIntErrors(self):        self.assertRaises(BitStringError, BitString, int = -1, length = 0)        self.assertRaises(BitStringError, BitString, int = 12)        self.assertRaises(BitStringError, BitString, int = 4, length = 3)        self.assertRaises(BitStringError, BitString, int = -5, length = 3)        def testCreationFromSe(self):        [self.assertEqual(BitString(se = i).se, i) for i in range(-10, 10)]        def testCreationFromSeErrors(self):        self.assertRaises(BitStringError, BitString, se = -5, length = 33)        def testCreationFromUe(self):        for i in range(10):            s = BitString(ue = i)            self.assertEqual(s.bitpos, 0)            self.assertEqual(s.ue, i)        def testCreationFromUeErrors(self):        self.assertRaises(BitStringError, BitString, ue = -1)        self.assertRaises(BitStringError, BitString, ue = 1, length = 12)            def testIncorrectBinAssignment(self):        s = BitString()        self.assertRaises(BitStringError, s._setbin, '0010020')            def testIncorrectHexAssignment(self):        s = BitString()        self.assertRaises(BitStringError, s._sethexsafe, '0xabcdefg')            def testLengthZero(self):        self.assertEqual(BitString('').length, 0)            def testLength(self):        self.assertEqual(BitString('\x80').length, 8)         self.assertEqual(BitString('\x80', 5).length, 5)        self.assertEqual(BitString('\x80', 0).length, 0)            def testLengthErrors(self):        self.assertRaises(BitStringError, BitString, bin='111', length = -1)        self.assertRaises(BitStringError, BitString, bin='111', length = 4)            def testOffsetLengthError(self):        self.assertRaises(BitStringError, BitString, 'hex=0xffff', offset = 8)        self.assertRaises(BitStringError, BitString, 'hex=0xffff', offset = -1)            def testConvertToUint(self):        self.assertEqual(BitString('\x10').uint, 16)        self.assertEqual(BitString('\x1f', 6).uint, 7)            def testConvertToInt(self):        self.assertEqual(BitString('\x10').int, 16)        self.assertEqual(BitString('\xf0', 5).int, -2)            def testConvertToHex(self):        self.assertEqual(BitString('\x00\x12\x23\xff').hex, '0x001223ff')            def testConvertToBin(self):        self.assertEqual(BitString('\x00',1).bin, '0')        self.assertEqual(BitString('\x80',1).bin, '1')        self.assertEqual(BitString('\x00\x12\x23\xff').bin, '00000000000100100010001111111111')            def testReadBits(self):        s = BitString('\x4d\x55')        self.assertEqual(s.readbits(4).hex, '0x4')        self.assertEqual(s.readbits(8).hex, '0xd5')        self.assertEqual(s.readbits(1).bin, '0')        self.assertEqual(s.readbits(3).bin, '101')        self.assertEqual(s.readbits(0).empty(), True)            def testReadByte(self):        s = BitString(hex='4d55')        self.assertEqual(s.readbyte().hex, '0x4d')        self.assertEqual(s.readbyte().hex, '0x55')        def testReadBytes(self):        s = BitString(hex='0x112233448811')        self.assertEqual(s.readbytes(3).hex, '0x112233')        self.assertRaises(BitStringError, s.readbytes, -2)        s.bitpos += 1        self.assertEqual(s.readbytes(2).bin, '1000100100010000')            def testEmptyBitstring(self):        s = BitString()        self.assertRaises(BitStringError, s.readbits, 1)        self.assertEqual(s.bin, '')        self.assertEqual(s.hex, '')        self.assertRaises(BitStringError, s._getint)        self.assertRaises(BitStringError, s._getuint)        self.assertEqual(s.empty(), True)            def testNonEmptyBitString(self):        s = BitString(bin='0')        self.assertEqual(s.empty(), False)            def testUE(self):        self.assertRaises(BitStringError, BitString('')._getue)        # The numbers 0 to 8 as unsigned Exponential-Golomb codes        s = BitString(bin='1 010 011 00100 00101 00110 00111 0001000 0001001')        self.assertEqual(s.bitpos, 0)        for i in range(9):            self.assertEqual(s.ue, i)        self.assertRaises(BitStringError, s._getue)            def testSE(self):        s = BitString(bin='010 00110 0001010 0001000 00111') # 15976        self.assertEqual(s.se, 1)        self.assertEqual(s.se, 3)        self.assertEqual(s.se, 5)        self.assertEqual(s.se, 4)        self.assertEqual(s.se, -3)    def testBitPosition(self):        s = BitString('\x00\x00\x00')        self.assertEqual(s.bitpos, 0)        s.readbits(5)        self.assertEqual(s.bitpos, 5)            def testBytePosition(self):        s = BitString('\x00\x00\x00')        self.assertEqual(s.bytepos, 0)        s.readbits(10)        self.assertRaises(BitStringError, s._getbytepos)        s.readbits(6)        self.assertEqual(s.bytepos, 2)            def testSeekToBit(self):        s = BitString('\x00\x00\x00\x00\x00\x00')        s.bitpos = 0        self.assertEqual(s.bitpos, 0)        self.assertRaises(BitStringError, s._setbitpos, -1)        self.assertRaises(BitStringError, s._setbitpos, 6*8)        s.bitpos = 6*8 - 1        self.assertEqual(s.bitpos, 6*8 - 1)            def testSeekToByte(self):        s = BitString('\x00\x00\x00\x00\x00\xab')        s.bytepos = 5        self.assertEqual(s.readbits(8).hex, '0xab')            def testAdvanceBitsAndBytes(self):        s = BitString('\x00\x00\x00\x00\x00\x00\x00\x00')        s.advancebits(5)        self.assertEqual(s.bitpos, 5)        s.advancebytes(2)        self.assertEqual(s.bitpos, 2*8+5)        s.retreatbytes(1)        self.assertEqual(s.bitpos, 8+5)        self.assertRaises(BitStringError, s.advancebytes, -2)            def testFindBytes(self):        s = BitString('\x01\x02\x03\x04\x01\x02\xff')        self.assertFalse(s.findbytealigned('\x05'))        self.assertTrue(s.findbytealigned('\x02'))        self.assertEqual(s.readbytes(2).hex, '0x0203')        self.assertTrue(s.findbytealigned('\x02'))        s.readbit()        self.assertFalse(s.findbytealigned('\x02'))            def testFindBytesBitpos(self):        s = BitString(hex='0x1122334455')        s.bitpos = 2        s.findbytealigned('\x66')        self.assertEqual(s.bitpos, 2)        s.bitpos = 38        s.findbytealigned('\x66')        self.assertEqual(s.bitpos, 38)            def testFindByteAligned(self):        s = BitString(hex='0x12345678')        self.assertTrue(s.findbytealigned(BitString(hex='0x56')))        self.assertEqual(s.bytepos, 2)        s.bitpos = 0        self.assertFalse(s.findbytealigned(BitString(hex='0x45')))            def testFindOffset(self):        s = BitString(hex='0x112233', offset = 4)        self.assertTrue(s.findbytealigned(BitString(hex='0x23')))        self.assertEqual(s.offset, 0)            def testFindErrors(self):        s = BitString(hex='0xffff')        self.assertRaises(BitStringError, s.findbytealigned, '')        self.assertRaises(BitStringError, s.findbytealigned, BitString())        self.assertRaises(BitStringError, s.findbytealigned, BitString(bin='00'))            def testOffset1(self):        s = BitString('\x00\x1b\x3f', offset = 4)        self.assertEqual(s.readbits(8).bin, '00000001')        self.assertEqual(s.length, 20)            def testOffset2(self):        s1 = BitString('\xf1\x02\x04')        s2 = BitString('\xf1\x02\x04', 23)        for i in [1,2,3,4,5,6,7,6,5,4,3,2,1,0,7,3,5,1,4]:            s1._setoffset(i)            self.assertEqual(s1.hex, '0xf10204')            s2._setoffset(i)            self.assertEqual(s2.bin, '11110001000000100000010')        self.assertRaises(BitStringError, s1._setoffset, -1)        self.assertRaises(BitStringError, s1._setoffset, 8)        def testAppend(self):        s1 = BitString('\x00', 5)        s1 = s1.append(BitString('\xff', 1))        self.assertEqual(s1.bin, '000001')        self.assertEqual(BitString('\x01\x02').append(BitString('\x03\x04')).hex, '0x01020304')            def testAppendSameBitstring(self):        s1 = BitString('\xf0', 6)        self.assertEqual(s1.append(s1).bin, '111100111100')            def testByteAlign(self):        s = BitString(hex='0001ff23')        s.bytealign()        self.assertEqual(s.bytepos, 0)        s.advancebits(11)        s.bytealign()        self.assertEqual(s.bytepos, 2)        s.retreatbits(10)        s.bytealign()        self.assertEqual(s.bytepos, 1)            def testByteAlignWithOffset(self):        s = BitString(hex='0112233')        s._setoffset(3)        bitstoalign = s.bytealign()        self.assertEqual(bitstoalign, 0)        self.assertEqual(s.readbits(5).bin, '00001')            def testInsertByteAligned(self):        self.assertEqual(BitString('\x00\x11').insert(BitString('\x22'), 8).hex, '0x002211')        s = BitString('\xff', 0).insert(BitString(bin = '101'), 0)         self.assertEqual(s.bin, '101')            def testTruncateStart(self):        s = BitString(hex='1234')        self.assertEqual(s.truncatestart(0).hex, '0x1234')        self.assertEqual(s.truncatestart(4).hex, '0x234')        s2 = s.truncatestart(13)        self.assertEqual(s2.bin, '100')        s = s2.truncatestart(2)        self.assertEqual(s.bin, '0')        self.assertEqual(s.length, 1)        s = s.truncatestart(1)        self.assertEqual(s.empty(), True)            def testTruncateEnd(self):        s = BitString('\x12\x34')        self.assertEqual(s.truncateend(0).hex, '0x1234')        self.assertEqual(s.truncateend(4).hex, '0x123')        s = s.truncateend(13)        self.assertEqual(s.bin, '000')        s = s.truncateend(3)        self.assertEqual(s.empty(), True)        def testByteAlignedSlice(self):        s = BitString(hex = '0x123456')        self.assertEqual(s.slice(8, 16).hex, '0x34')        s = s.slice(8, 24)        self.assertEqual(s.length, 16)        self.assertEqual(s.hex, '0x3456')        s = s.slice(0, 8)        self.assertEqual(s.hex, '0x34')        s.hex = '0x123456'        self.assertEqual(s.slice(8, 24).slice(0, 8).hex, '0x34')        def testSlice(self):        s = BitString(bin = '000001111100000')        s1 = s.slice(0, 5)        s2 = s.slice(5, 10)        s3 = s.slice(10, 15)        self.assertEqual(s1.bin, '00000')        self.assertEqual(s2.bin, '11111')        self.assertEqual(s3.bin, '00000')    def testSliceErrors(self):        s = BitString(hex = '0x123456')        self.assertRaises(BitStringError, s.slice, -1, 8)        self.assertRaises(BitStringError, s.slice, 0, 33)    def testInsert(self):        s1 = BitString(hex = '0x123456')        s2 = BitString(hex = '0xff')        s3 = s1.insert(s2, 8)        self.assertEqual(s3.hex, '0x12ff3456')    def testInsertNull(self):        s = BitString(hex = '0x123').insert(BitString(), 3)        self.assertEqual(s.hex, '0x123')    def testInsertBits(self):        one = BitString(bin = '1')        zero = BitString(bin = '0')        s = BitString(bin = '00')        s = s.insert(one, 0)        self.assertEqual(s.bin, '100')        s = s.insert(zero, 0)        self.assertEqual(s.bin, '0100')        s = s.insert(one, s.length)        self.assertEqual(s.bin, '01001')        s = s.insert(s, 2)        self.assertEqual(s.bin, '0101001001')    def testSetHex(self):        s = BitString()        s.hex = 'ff'        self.assertEqual(s.hex, '0xff')        s.hex = '0x010203045'        self.assertEqual(s.hex, '0x010203045')        self.assertRaises(BitStringError, s._sethexsafe, '0x002g')        def testSetHexWithLength(self):        s = BitString(hex='0xffff', length = 9)        self.assertEqual(s.bin, '111111111')        s2 = s.slice(0, 4)        self.assertEqual(s2.hex, '0xf')    def testSetBin(self):        s = BitString(bin="000101101")        self.assertEqual(s.bin, '000101101')        self.assertEqual(s.length, 9)        self.assertEqual(s.offset, 0)        s.bin = '0'        self.assertEqual(s.bin, '0')        self.assertEqual(s.length, 1)    def testSetEmptyBin(self):        s = BitString(hex='0x000001b3')        s.bin = ''        self.assertEqual(s.length, 0)        self.assertEqual(s.bin, '')    def testSetInvalidBin(self):        s = BitString()        self.assertRaises(BitStringError, s._setbin, '00102')    def testSingleByteFromHexString(self):        for i in range(0, 16):            s = BitString(bitstring._single_byte_from_hex_string('0' + hex(i)[2:]), length=8)            self.assertEqual(s.hex[3:], hex(i)[2:])        for i in range(16, 256):            s = BitString(bitstring._single_byte_from_hex_string(hex(i)[2:]), length=8)            self.assertEqual(s.hex, hex(i))    def testHexStringFromSingleByte(self):        self.assertEqual(bitstring._hex_string_from_single_byte('\x00'), '00')        self.assertEqual(bitstring._hex_string_from_single_byte('\x01'), '01')        self.assertEqual(bitstring._hex_string_from_single_byte('\x4e'), '4e')        self.assertEqual(bitstring._hex_string_from_single_byte('\xff'), 'ff')    def testAdding(self):        s1 = BitString(hex = '0x0102')        s2 = BitString(hex = '0x0304')        s3 = s1 + s2        self.assertEqual(s1.hex, '0x0102')        self.assertEqual(s2.hex, '0x0304')        self.assertEqual(s3.hex, '0x01020304')        s3 += s1        self.assertEqual(s3.hex, '0x010203040102')        self.assertEqual(s2.slice(9,16).bin, '0000100')        self.assertEqual(s1.slice(0, 9).bin, '000000010')        s4 = BitString(bin='000000010', length=9) + \             BitString(bin='0000100', length=7)        self.assertEqual(s4.bin, '0000000100000100')        s2p = s2.slice(9, 16)        s1p = s1.slice(0, 9)        s5p = s1p + s2p        s5 = s1.slice(0, 9) + s2.slice(9, 16)        self.assertEqual(s5.bin, '0000000100000100')    def testMoreAdding(self):        s = BitString(bin='00') + BitString(bin='') + BitString(bin='11')        self.assertEqual(s.bin, '0011')    def testAddingWithOffset(self):        s = BitString(bin='000011111') + BitString(bin='1110001', offset=3)        self.assertEqual(s.bin, '0000111111110001')    def testOverwriteBit(self):        s = BitString(bin='0')        s = s.overwrite(BitString(bin='1'), 0)        self.assertEqual(s.bin, '1')    def testOverwriteLimits(self):        s = BitString(bin='11111')        s1 = s.overwrite(BitString(bin = '000'), 0)        s2 = s.overwrite(BitString(bin = '000'), 2)        self.assertEqual(s1.bin, '00011')        self.assertEqual(s2.bin, '11000')    def testOverwriteNull(self):        s = BitString(hex='342563fedec')        s2 = s.overwrite(BitString(bin=''), 23)        self.assertEqual(s.bin, s2.bin)    def testOverwritePosition(self):        s1 = BitString(hex='0123456')        s2 = BitString(hex='ff')        s1.bytepos = 1        s3 = s1.overwrite(s2)        self.assertEqual((s3.hex, s3.bytepos), ('0x01ff456', 2))    def testOverwriteErrors(self):        s = BitString(bin='11111')        self.assertRaises(BitStringError, s.overwrite, BitString(bin='1'), -1)        self.assertRaises(BitStringError, s.overwrite, BitString(bin='1'), 6)        self.assertRaises(BitStringError, s.overwrite, BitString(bin='11111'), 1)    def testDeleteBits(self):        s = BitString(bin='000111100000')        s.bitpos = 4        s = s.deletebits(4)        self.assertEqual(s.bin, '00010000')            def testDeleteBitsWithPosition(self):        s = BitString(bin='000111100000')        s = s.deletebits(4, 4)        self.assertEqual(s.bin, '00010000')    def testDeleteBitsErrors(self):        s = BitString(bin='000111')        self.assertRaises(BitStringError, s.deletebits, -3)        self.assertRaises(BitStringError, s.deletebits, 7)    def testGetItemWithPositivePosition(self):        s = BitString(bin='1011')        self.assertEqual(s[0].bin, '1')        self.assertEqual(s[1].bin, '0')        self.assertEqual(s[2].bin, '1')        self.assertEqual(s[3].bin, '1')        self.assertRaises(IndexError, s.__getitem__, 4)    def testGetItemWithNegativePosition(self):        s = BitString(bin='1011')        self.assertEqual(s[-1].bin, '1')        self.assertEqual(s[-2].bin, '1')        self.assertEqual(s[-3].bin, '0')        self.assertEqual(s[-4].bin, '1')        self.assertRaises(IndexError, s.__getitem__, -5)    def testSlicing(self):        s = BitString(hex='0123456789')        self.assertEqual(s[0:8].hex, '0x01')        self.assertEqual(s[0:0].empty(), True)        self.assertEqual(s[23:20].empty(), True)        self.assertEqual(s[8:12].bin, '0010')    def testNegativeSlicing(self):        s = BitString(hex='0x012345678')        self.assertEqual(s[:-8].hex, '0x0123456')        self.assertEqual(s[-16:-8].hex, '0x56')        self.assertEqual(s[-24:].hex, '0x345678')    def testSlicingErrors(self):        s = BitString(hex='0x012345')        self.assertRaises(BitStringError, s.__getitem__, slice(0,10,2))    def testLen(self):        s = BitString()        self.assertEqual(len(s), 0)        s = s.append(BitString(bin='001'))        self.assertEqual(len(s), 3)        def testJoin(self):        s1 = BitString(bin='0')        s2 = BitString(bin='1')        s3 = BitString(bin='000')        s4 = BitString(bin='111')        strings = [s1, s2, s1, s3, s4]        s = bitstring.join(strings)        self.assertEqual(s.bin, '010000111')    def testJoin2(self):        s1 = BitString(hex='00112233445566778899aabbccddeeff')        s2 = BitString(bin='000011')        bsl = [s1[0:32], s1[4:12], s2, s2, s2, s2]        s = bitstring.join(bsl)        self.assertEqual(s.hex, '0x00112233010c30c3')                        bsl = [BitString(uint=j, length=12) for j in range(100) for i in range(100)]        s = bitstring.join(bsl)        self.assertEqual(s.length, 120000)    def testSplitCornerCases(self):        s = BitString()        bsl = s.split(BitString(hex='0xff'))        self.assertEqual(bsl.next().hex, '')        self.assertRaises(StopIteration, bsl.next)        s = BitString(hex='aabbcceeddff')        delimiter = BitString()        # This next assert fails, but seems to be a Python bug?        # self.assertRaises(BitStringError, s.split, delimiter)        delimiter = BitString(hex='11')        bsl = s.split(delimiter)        self.assertEqual(bsl.next().hex, s.hex)    def testSplit(self):        s = BitString(hex='0x1234aa1234bbcc1234ffff')        delimiter = BitString(hex='1234')        bsl = s.split(delimiter)        self.assertEqual([b.hex for b in bsl], ['', '0x1234aa', '0x1234bbcc', '0x1234ffff'])    def testSplitWithIntialBytes(self):        s = BitString(hex='aa471234fedc43 47112233 47 4723 472314')        delimiter = BitString(hex='47')        s.findbytealigned(delimiter)        self.assertEqual(s.bytepos, 1)        bsl = s.split(delimiter)        self.assertEqual([b.hex for b in bsl], ['0xaa', '0x471234fedc43', '0x47112233',                                                  '0x47', '0x4723', '0x472314'])    def testSplitWithOverlappingDelimiter(self):        s = BitString(hex='aaffaaffaaffaaffaaff')        bsl = s.split(BitString(hex='aaffaa'))        self.assertEqual([b.hex for b in bsl], ['', '0xaaffaaff', '0xaaffaaffaaff'])    def testPos(self):        s = BitString(bin='1')        self.assertEqual(s.bitpos, 0)        s.readbits(1)        self.assertEqual(s.bitpos, 1)    def testWritingData(self):        strings = [BitString(bin=x) for x in ['0','001','0011010010','010010','1011']]        s = bitstring.join(strings)        s2 = BitString(data = s.data)        self.assertEqual(s2.bin, '000100110100100100101011')        s2 = s2.append(BitString(bin='1'))        s3 = BitString(data = s2.data)        self.assertEqual(s3.bin, '00010011010010010010101110000000')            def testVariousThings1(self):        hexes = ['0x12345678', '0x87654321', '0xffffffffff', '0xed', '0x12ec']        bins = ['001010', '1101011', '0010000100101110110110', '0', '011']        bsl = []        for (hex, bin) in zip(hexes, bins)*15:            bsl.append(BitString(hex=hex))            bsl.append(BitString(bin=bin))        s = bitstring.join(bsl)        for (hex, bin) in zip(hexes, bins)*15:            h = s.readbytes((len(hex)-2)/2)            b = s.readbits(len(bin))            self.assertEqual(h.hex, hex)            self.assertEqual(b.bin, bin)    def testVariousThings2(self):        s1 = BitString(hex="0x1f08", length=13)        self.assertEqual(s1.bin, '0001111100001')        s2 = BitString(bin='0101011000', length=4)        self.assertEqual(s2.bin, '0101')        s3 = s1.append(s2)        self.assertEqual(s3.length, 17)        self.assertEqual(s3.bin, '00011111000010101')        s3 = s3.slice(3,8)        self.assertEqual(s3.bin, '11111')    def testVariousThings3(self):        s1 = BitString(hex='0x012480ff', length=25, offset=2)        s2 = s1+s1        self.assertEqual(s2.offset, 2)        self.assertEqual(s2.length, 50)        s3 = s2[0:25]        s4 = s2[25:50]        self.assertEqual(s3.bin, s4.bin)    #def testDoingSomethingTimeConsuming(self):    #    s = BitString()    #    for i in range(10000):    #        s = BitString(uint = 1000*i, length=200).bindef main():    unittest.main()if __name__ == '__main__':    main()