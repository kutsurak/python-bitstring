#summary Reading, finding, navigating
----
*Next:* [Miscellany]
----
= Navigating =

== Reading ==

Another common use is to parse a large `BitString` into smaller syntax elements. Functions for reading in bytes and bits are provided and will return new `BitString` objects. These new objects are top-level `BitString` objects and can be interpreted using properties as in the next example or could be read from to form a hierarchy of reads.
{{{
s = BitString(filename='test/test.m1v')
start_code = s.readbytes(4).hex
width = s.readbits(12).uint
height = s.readbits(12).uint
s.advancebits(37)

flags = s.readbits(2)
constrained_parameters_flag = flags.readbit().uint
load_intra_quantiser_matrix = flags.readbit().uint
}}}
In addition to the `read` functions there are matching `peek` functions. These are identical to the `read` except that they do not advance the position in the `BitString`.
{{{
s = BitString('0x4732aa34')
if s.peekbyte().hex == '0x47':
    t = s.readbytes(2)          # t.hex == '0x4732'
else:
    s.findbytealigned('0x47')
}}}

== Seeking ==
The properties `bitpos` and `bytepos` are available for getting and setting the position, which is zero on creation of the `BitString`. For relative movement either use the `+=` and `-=` operators or the advance and retreat functions.

{{{
s = BitString('0x123456')
print s.bitpos                 # 0
s.bytepos += 2
print s.bitpos                 # 16 (note bitpos verses bytepos)
s.advancebits(4)
print s.read(4).bin            # 0b0110 (the final nibble '0x6')
}}}

== Finding ==

To search for a sub-string use the 'find' and 'findbytealigned' functions. These will set the position to the start of the next occurrence of the searched for string and return `True`, or just return `False` if the string isn't present. As its name implies, `findbytealigned` looks for only byte aligned occurrences of a whole-byte `BitString`.

{{{
s = BitString('0x00123400001234')
found = s.findbytealigned('0x1234')
print(found, s.bytepos)               # True, 1
found = s.findbytealigned('0xff')
print(found, s.bytepos)               # False, 1
}}}
----
*Next:* [Miscellany]
----