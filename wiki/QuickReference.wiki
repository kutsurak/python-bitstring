#summary Brief description of the bitstring module
#labels Deprecated

== The bitstring Module ==

One class is provided, *!BitString*, which has the following public methods and properties.

----

*advancebit*
 _advancebit()_

 Advances position by _1_ bit. Equivalent to _bitpos += 1_.
----

*advancebits*
 _advancebits(n)_

 Advances position by _n_ bits. Equivalent to _bitpos += n_.
----

*advancebyte*
 _advancebyte()_

 Advances position by _8_ bits. Unlike the alternative, _bytepos += 1_, _advancebyte_ will not raise a _!BitStringError_ if the current position is not byte-aligned.
----

*advancebytes*
 _advancebytes(n)_

 Advances position by _8*n_ bits. Unlike the alternative, _bytepos += n_, _advancebytes_ will not raise a _!BitStringError_ if the current position is not byte-aligned.

----

*append*
 _append(bs)_

 Join a _!BitString_ to the end of the current _!BitString_. Returns self. _bs_ can be either a _!BitString_ or a string for the _auto_ initialiser.

{{{
 s.append(BitString(hex='ffab'))
 s.append('0xffab')
}}}
----

*bin*
 _bin_

 Read and write property for setting and getting the representation of the _!BitString_ as a binary string starting with '_0b_'. When used as a getter, the returned value is always calculated - the value is never cached. When used as a setter the length of the _!BitString_ will be adjusted to fit its new contents.

{{{
 if s.bin == '0b001':
     s.bin = '0b1111'

 s.bin += '1'         # Equivalent to s.append('0b1')
}}}
----

*bitpos*
 _bitpos_

 Read and write property for setting and getting the current bit position in the _!BitString_. Can be set to any value from _0_ to _length_.
{{{
 if s.bitpos < 100:
     s.bitpos += 10
}}}
----

*bytealign*
 _bytealign()_

----

*bytepos*
 _bytepos_

 Read and write property for setting and getting the current byte position in the _!BitString_. When used as a getter will raise a _BitStringError_ if the current position in not byte aligned.

----

*data*
 _data_

 Read and write property for setting and getting the underlying byte data that contains the _!BitString_. Set using an ordinary Python string - the length will be adjusted to contain the data. When used as a getter the _!BitString_ will be padded with between zero and seven '0' bits to make it byte aligned. 

----

*deletebits*
 _deletebits(bits, bitpos=None)_

----

*deletebytes*
 _deletebytes(bytes, bytepos=None)_

----

*empty*
 _empty()_

 Returns _True_ if the _!BitString_ is empty, i.e. has _length==0_. Otherwise returns _False_.

----
  
*find*
 _find(bs, bytealigned=True, startbit=None, endbit=None)_

----

*hex*
 _hex_

----

*insert*
 _insert(bs, bitpos=None)_

----

*int*
 _int_

----

*length*
 _length_

 Read-only property that gives the length of the _!BitString_ in bits.

----

*oct*
 _oct_

----

*overwrite*
 _overwrite(bs, bitpos=None)_

----

*peekbit*
 _peekbit()_

 Returns the next bit in the current _!BitString_ as a new _!BitString_ but does not advance the position.

----

*peekbits*
 _peekbits(bits)_

 Returns the next _bits_ bits of the current _!BitString_ as a new _!BitString_ but does not advance the position.

----

*peekbyte*
 _peekbyte()_

 Returns the next byte of the current _!BitString_ as a new _!BitString_ but does not advance the position.

----

*peekbytes*
 _peekbytes(bytes)_

Returns the next _bytes_ bytes of the current _!BitString_ as a new _!BitString_ but does not advance the position.

----

*prepend*
 _prepend(bs)_

 Inserts _bs_ (which can be either a _!BitString_ or a string for the _auto_ initialiser) at the beginning of the current _!BitString_. Returns self.

----

*readbit*
 _readbit()_

 Returns the next bit of the current _!BitString_ as a new _!BitString_ and advances the position.

----

*readbits*
 _readbits()_

 Returns the next _bits_ bits of the current _!BitString_ as a new _!BitString_ and advances the position.

----

*readbyte*
 _readbyte()_

 Returns the next byte of the current _!BitString_ as a new _!BitString_ and advances the position.

----

*readbytes*
 _readbytes(bytes)_

 Returns the next _bytes_ bytes of the current _!BitString_ as a new _!BitString_ and advances the position.

----

*readse*
 _readse()_

----

*readue*
 _readue()_

----

*replace*
 _replace(old, new, bytealigned=True, startbit=None, endbit=None, count=None)_

----

*retreatbit*
 _retreatbit()_

----

*retreatbits*
 _retreatbits(bits)_

----

*retreatbyte*
 _retreatbyte()_

----

*retreatbytes*
 _retreatbytes(bytes)_

----

*reversebits*
 _reversebits()_

----

*rfind*
 _rfind(bs, bytealigned=True, startbit=None, endbit=None)_

----

*se*
 _se_

----

*seekbit*
 _seekbit(bitpos)_

----

*seekbyte*
 _seekbyte(bytepos)_

----

*slice*
 _slice(startbit, endbit)_

----

*split*
 _split(delimiter, bytealigned=True, maxsplit=None)_

----

*tellbit*
 _tellbit()_

----

*tellbyte*
 _tellbyte()_

----

*truncateend*
 _truncateend(bits)_

----

*truncatestart*
 _truncatestart(bits)_

----

*ue*
 _ue_

----

*uint*
 _uint_