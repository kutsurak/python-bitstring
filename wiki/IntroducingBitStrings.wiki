#summary What they are, and why you might need them
#labels Deprecated
----
*Next:* [CreatingBitStrings Creating BitStrings]
----
= Contents =

This tutorial is divided into a number of pages for ease of use. You can either use the links at the top and bottom of each page for navigation or jump straight to the page you want from the list below.

  * [IntroducingBitStrings Introduction] (this page)
  * [CreatingBitStrings Creating BitStrings]
  * [InterpretingBitStrings Interpreting BitStrings]
  * [ModifyingBitStrings Modifying BitStrings]
  * [DeconstructingBitStrings Deconstructing BitStrings]
  * [Miscellany]

= Introduction =
The bitstring module is a pure Python module designed to allow binary data to be read, interpreted, created and modified with as much ease as possible.

A single class, `BitString`, is provided that stores the binary data and offers a rich variety of methods for all your binary needs. A flavour is given below, and will be covered in greater detail in the next few pages of this tutorial.

{{{
from bitstring import BitString

# There are lots of ways to create BitStrings
a = BitString('0b001')                     # from a binary string
b = BitString('0xff470001')                # from a hexadecimal string
c = BitString(filename='somefile.ext')     # straight from a file
d = BitString(int=540, length=11)          # from an integer

# Easily construct new BitStrings
e = 5*a + '0xcdcd'                         # 5 copies of 'a' followed by two new bytes
e.prepend('0b1')                           # put a single bit on the front
f = e[7:]                                  # cut the first 7 bits off

# Interpret the BitString however you want
print e.hex                                # 0x9249cdcd
print e.int                               Â # -1840656947
print e.uint                               # 2454310349


}}}

----
*Next:* [CreatingBitStrings Creating BitStrings]
----