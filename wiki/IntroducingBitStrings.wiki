#summary What they are, and why you might need them
----
*Previous:* [Tutorial Contents]

*Next:* [CreatingBitStrings Creating BitStrings]
----

= Introduction =
The bitstring module is a pure Python module designed to allow binary data to be read, interpreted, created and modified with as much ease as possible. A single class, `BitString`, is provided that stores the binary data and offers a rich variety of methods for all your binary needs.

A `BitString` object is designed to be as lightweight as possible and is best considered as just a sequence of binary digits. Although there are a variety of ways of creating and viewing the binary data, the `BitString` object itself just stores the data and all views are calculated as needed, not stored as part of the object.

The different views or interpretations on the data are accessed through properties such as `hex`, `bin` and `int`. They can also be used to reinitialise an existing `BitString`. 

A flavour is given below, and will be covered in greater detail in the next few pages of this tutorial.

{{{
from bitstring import BitString

# Just some of the ways to create BitStrings
a = BitString('0b001')                     # from a binary string
b = BitString('0xff470001')                # from a hexadecimal string
c = BitString(filename='somefile.ext')     # straight from a file
d = BitString(int=540, length=11)          # from an integer

# Easily construct new BitStrings
e = 5*a + '0xcdcd'                         # 5 copies of 'a' followed by two new bytes
e.prepend('0b1')                           # put a single bit on the front
f = e[7:]                                  # cut the first 7 bits off
f[1:4] = '0o775'                           # replace 3 bits with 9 bits from octal string
f.replace('0b01', '0xee34', False)         # find and replace 2 bit string with 16 bit string

# Interpret the BitString however you want
print e.hex                                # 0x9249cdcd
print e.int                               Â # -1840656947 (signed 2's complement integer)
print e.uint                               # 2454310349  (unsigned integer)
open('somefile.ext', 'rb').write(e.data)   # Output raw byte data to a file
}}}


= Getting Started =
First download the latest release for either Python 2.x or 3.0 (see the Downloads tab) and extract the contents of the zip. You should find:

  * `bitstring.py` : The bitstring module itself.
  * `test_bitstring.py` : Unit tests for the module.
  * `setup.py` : The setup script.
  * `readme.txt` : Short readme to provide link back to this site.
  * `release_notes.txt` : History of changes in this and previous versions.
  * `test/` : Directory for test files
    * `test.m1v` : An example file (MPEG-1 video) for testing purposes.
    * `smalltestfile` : Another small file for testing.

To install, run
{{{
python setup.py install
}}}
This will copy `bitstring.py` to your Python installation's `site-packages` directory.
If you prefer you can do this by hand, or just make sure that your Python program can see `bitstring.py`, for example by putting in the same directory as the program that will use it.

The module comes with comprehensive unit tests. To run them yourself type
{{{
python test_bitstring.py
}}}
which should run all the tests (roughly 200) and say OK. If tests fail then either your version of Python isn't supported (it's only been tested on 2.4, 2.5 and 2.6) or something unexpected has happened - in which case please go to the 'Issues' tab and tell me about it.


----
*Next:* [CreatingBitStrings Creating BitStrings]
----