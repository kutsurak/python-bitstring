#summary Answers to some frequently asked questions
#labels Featured

_disclaimer_: None of these questions have really been frequently asked. I'm just making it up. If you have a real question then please ask it; either directly to me (scott@griffiths.name) or in the comment section below.

----

===How well optimised is the code? Are you planning to port to C?===

The module is pure Python at the moment, and I've got no plans to move any of it to C. That may change in the future, but certainly won't happen before it comes out of beta. Attention has been paid to using the right algorithms to maximise the speed, and I have some grand plans for further algorithmic improvements in the medium term. If you have a particular case that you think is unreasonably slow then please tell me about it. 

----

===When is it coming out of beta?===

When it's ready :-). I still find myself wanting to tweak parts of the current interface, as well as having a healthy list of features to add so I'm not rushing to get to version 1.0. If pressed, I'd say it is likely to hit that milestone in late 2009, but who knows.

----

===What's the deal with Python 3 support?===

I made a port of version 0.4.0 to Python 3 as an experiment, partly to see how much demand there would be. The answer is not a lot - I estimate that there have been twenty Python 2 downloads per Python 3 download. As there's only one of me and my time is precious I haven't ported any later version. I am planning to do so when we get to version 1.0. If you really need a later version for Python 3 then feel free to ask, I could be persuaded.

----

===Will Python 2.4 and 2.5 continue to be supported?===

Yes, until at least version 1.0. I am very tempted to drop support for older Python versions after this point because there are lots of simplifications I can make using newer Python 2.6 syntax and features, plus this will ease the transition to Python 3.

===Are you going to introduce feature X?===

That depends. If you have any feature requests then please take a look at the Issues tab, and if it's already there add a comment to say you want it, and if it's not then add a new issue. I am open to suggestions.

----

===How do you deal with big-endian / little-endian data?===

Currently (version 0.5.0) all of the interpretations are big-endian, both byte-wise and bit-wise. I am planning to add little-endian integer types for whole-byte !BitStrings (tentatively called `uintle` and `intle`). In the meantime to get a little-endian value, byte reverse the !BitString and use the big-endian interpretation (e.g. `le = s[::-8].int`)

----