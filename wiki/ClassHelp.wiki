#summary Help on module bitstring:
#labels Featured
{{{
    class BitString(__builtin__.object)
     |  A class for general bit-wise manipulations and interpretations.
     |  
     |  length : length of the string in bits, if needed
     |  offset : bit offset to the data (0 -> 7). The first offset bits are ignored.
     |  
     |  Initialise the BitString with one (and only one) of:
     |  data : raw data as a string, for example read from binary file
     |  bin : binary string representation, e.g. '00101110'
     |  hex : hexadecimal string representation, e.g. '0x2e'
     |  uint : unsigned integer (length must be supplied)
     |  int : signed integer (length must be supplied)
     |  se : signed Exponential-Golomb (length must not be supplied)
     |  ue : unsigned Exponential-Golomb (length must not be supplied)
     |  filename : a file which will be opened in binary read-only mode
     |  
     |  e.g.
     |  a = BitString(hex='0x123ab560')
     |  b = BitString(filename="movie.ts")
     |  c = BitString(int=10, length=6)
     |  
     |  Methods defined here:
     |  
     |  __add__(self, s)
     |      Concatenate BitStrings and return new BitString.
     |  
     |  __copy__(self)
     |      Return a new copy of the BitString.
     |  
     |  __getitem__(self, key)
     |      Return a slice of the BitString. Indices are in bits and stepping is not supported.
     |  
     |  __iadd__(self, s)
     |      Do the += thing.
     |  
     |  __init__(self, data=None, length=None, offset=0, filename=None, hex=None, bin=None, uint=None, int=None, ue=None, se=None)
     |      Contains a numerical string with length in bits with an offset bit count.
     |  
     |  __len__(self)
     |  
     |  advancebits(self, bits)
     |      Advance position by bits.
     |  
     |  advancebytes(self, bytes)
     |      Advance position by bytes. Does not byte align.
     |  
     |  append(self, bs)
     |      Return a BitString with the new BitString appended.
     |  
     |  bytealign(self)
     |      Align to next byte and return number of skipped bits.
     |  
     |  deletebits(self, bits, bitpos=None)
     |      Delete number of bits from the BitString at bitpos and return new BitString.
     |  
     |  empty(self)
     |      Return True only if the BitString is empty.
     |  
     |  find(self, s)
     |      Seek to start of next occurence of BitString. Return True if BitString is found.
     |  
     |  findbytealigned(self, d)
     |      Seek to start of next occurence of byte-aligned string or BitString. Return True if string is found.
     |  
     |  insert(self, bs, bitpos=None)
     |      Insert a BitString into the current BitString at bitpos and return new BitString.
     |  
     |  overwrite(self, bs, bitpos=None)
     |      Overwrite the section of the current BitString at bitpos with new data and return new BitString.
     |  
     |  readbit(self)
     |      Return BitString of length 1 and advances position.
     |  
     |  readbits(self, bits)
     |      Return new BitString of length bits and advance position.
     |  
     |  readbyte(self)
     |      Return BitString of length 8 bits and advances position. Does not byte align.
     |  
     |  readbytes(self, bytes)
     |      Return new BitString of length bytes and advances position. Does not byte align.
     |  
     |  readse(self)
     |      Return interpretation of next bits in stream as a signed Exponential-Golomb of the type used in H.264.
     |      Advances position to after the read code.
     |  
     |  readue(self)
     |      Return interpretation of next bits in stream as an unsigned Exponential-Golomb of the type used in H.264.
     |      Advances position to after the read code.
     |  
     |  retreatbits(self, bits)
     |      Retreat position by bits.
     |  
     |  retreatbytes(self, bytes)
     |      Retreat position by bytes.
     |  
     |  slice(self, startbit, endbit)
     |      Return a slice of the BitString: [startbit, endbit).
     |  
     |  split(self, delimiter)
     |      Return a generator of BitStrings by splittling into substrings starting with a byte aligned delimiter.
     |      The first item returned is the initial bytes before the delimiter, which may be empty.
     |  
     |  truncateend(self, bits)
     |      Truncate bits from the end of the BitString. Return new BitString.
     |  
     |  truncatestart(self, bits)
     |      Truncate bits from the start of the BitString. Return new BitString.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bin
     |      the BitString as a binary string (including leading zeros)
     |  
     |  bitpos
     |      the position in the BitString in bits
     |  
     |  bytepos
     |      the position in the BitString in bytes
     |  
     |  data
     |      the BitString as a ordinary string
     |  
     |  hex
     |      the BitString as a hexidecimal string (including leading zeros)
     |  
     |  int
     |      the BitString as a twos complement signed int
     |  
     |  length
     |      the length of the BitString in bits
     |  
     |  offset
     |      the offset of the BitString relative to being byte aligned
     |  
     |  se
     |      the BitString as a signed Exponential-Golomb
     |  
     |  ue
     |      the BitString as an unsigned Exponential-Golomb
     |  
     |  uint
     |      the BitString as an unsigned int
    
    class BitStringError(exceptions.Exception)
     |  Base class for errors in the bitstring module.
     |  


FUNCTIONS
    join(bitstringlist)
        Return the concatenation of the BitStrings in a list
}}}